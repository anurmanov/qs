name: System Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  system-tests:
    name: Run System Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
      max-parallel: 1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'
          check-latest: false

      - name: Install dependencies
        run: go mod download

      - name: Install git on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
            choco upgrade chocolatey -y
            choco install git -y --ignore-dependencies
          }

      - name: Install git on Linux and macOS
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt update && sudo apt install git -y
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install git
          fi

      - name: Install clipboard utility on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xclip

      - name: Install qs
        run: |
          go install github.com/untillpro/qs@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          # Verify qs is installed and in PATH
          if [ "$RUNNER_OS" == "Windows" ]; then
            qs --version || echo "qs command not found in PATH"
          else
            qs --version || echo "qs command not found in PATH"
          fi

      # Add explicit PATH export for macOS
      - name: Set PATH for macOS
        if: runner.os == 'macOS'
        run: |
          echo "PATH=$(go env GOPATH)/bin:$PATH" >> $GITHUB_ENV
          echo "Current PATH: $PATH"
          which qs || echo "qs not found in PATH"

      - name: Configure git identity
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Install GitHub CLI
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install gh
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install gh
          fi

      - name: Check GitHub credentials (Linux/macOS)
        if: runner.os != 'Windows'
        env:
          UPSTREAM_GH_TOKEN: ${{ secrets.UPSTREAM_GH_TOKEN }}
          FORK_GH_TOKEN: ${{ secrets.FORK_GH_TOKEN }}
          UPSTREAM_GH_ACCOUNT: ${{ secrets.UPSTREAM_GH_ACCOUNT }}
          FORK_GH_ACCOUNT: ${{ secrets.FORK_GH_ACCOUNT }}
        shell: bash
        run: |
          if [ -z "$UPSTREAM_GH_TOKEN" ] || [ -z "$FORK_GH_TOKEN" ] || [ -z "$UPSTREAM_GH_ACCOUNT" ] || [ -z "$FORK_GH_ACCOUNT" ]; then
            echo "Missing GitHub credentials"
            exit 1
          fi

      - name: Check GitHub credentials (Windows)
        if: runner.os == 'Windows'
        env:
          UPSTREAM_GH_TOKEN: ${{ secrets.UPSTREAM_GH_TOKEN }}
          FORK_GH_TOKEN: ${{ secrets.FORK_GH_TOKEN }}
          UPSTREAM_GH_ACCOUNT: ${{ secrets.UPSTREAM_GH_ACCOUNT }}
          FORK_GH_ACCOUNT: ${{ secrets.FORK_GH_ACCOUNT }}
        shell: pwsh
        run: |
          if (-not $env:UPSTREAM_GH_TOKEN -or -not $env:FORK_GH_TOKEN -or -not $env:UPSTREAM_GH_ACCOUNT -or -not $env:FORK_GH_ACCOUNT) {
            Write-Host "Missing GitHub credentials"
            exit 1
          }

      - name: GitHub CLI login
        env:
          UPSTREAM_GH_TOKEN: ${{ secrets.UPSTREAM_GH_TOKEN }}
          FORK_GH_TOKEN: ${{ secrets.FORK_GH_TOKEN }}
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            # Login for upstream account on Windows
            pwsh -Command "Remove-Item Env:\GH_TOKEN; $env:GH_TOKEN = $env:UPSTREAM_GH_TOKEN; $env:GH_TOKEN | gh auth login --with-token"
            
            # Login for fork account on Windows
            pwsh -Command "Remove-Item Env:\GH_TOKEN; $env:GH_TOKEN = $env:FORK_GH_TOKEN; $env:GH_TOKEN | gh auth login --with-token"
          else
            # Login for upstream account on Linux and macOS
            echo "$UPSTREAM_GH_TOKEN" | gh auth login --with-token
          
            # Login for fork account on Linux and macOS
            echo "$FORK_GH_TOKEN" | gh auth login --with-token
          fi
        shell: bash

      - name: Run system tests
        env:
          UPSTREAM_GH_TOKEN: ${{ secrets.UPSTREAM_GH_TOKEN }}
          FORK_GH_TOKEN: ${{ secrets.FORK_GH_TOKEN }}
          UPSTREAM_GH_ACCOUNT: ${{ secrets.UPSTREAM_GH_ACCOUNT }}
          FORK_GH_ACCOUNT: ${{ secrets.FORK_GH_ACCOUNT }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_TICKET_URL: ${{ secrets.JIRA_TICKET_URL }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          GH_TIMEOUT_MS: ${{ env.GH_TIMEOUT_MS}}
          QS_RETRY_DELAY_MS: ${{ env.QS_RETRY_DELAY_MS}}
          QS_MAX_RETRY_DELAY_MS: ${{ env.QS_MAX_RETRY_DELAY_MS}}
          QS_MAX_RETRIES: ${{ env.QS_MAX_RETRIES}}
        run: |
          go test -v sys_test.go
